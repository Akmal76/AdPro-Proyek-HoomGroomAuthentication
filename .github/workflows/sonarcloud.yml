# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: SonarCloud analysis

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  Analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the Git repository
        uses: actions/checkout@v4

      - name: Set up Environment Variables
        run: |
          echo "SONAR_HOST_URL=https://sonarcloud.io" >> $GITHUB_ENV
          echo "SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}" >> $GITHUB_ENV
          echo "SONAR_PROJECT_KEY=advpro-project_home-furniture-authentication" >> $GITHUB_ENV
          echo "SONAR_PROJECT_ORGANIZATION=advpro-project" >> $GITHUB_ENV
          echo "SONAR_JDBC_URL=${{ secrets.JDBC_DATABASE_URL }}" >> $GITHUB_ENV
          echo "SONAR_JDBC_USERNAME=${{ secrets.JDBC_DATABASE_USERNAME }}" >> $GITHUB_ENV
          echo "SONAR_JDBC_PASSWORD=${{ secrets.JDBC_DATABASE_PASSWORD }}" >> $GITHUB_ENV

      - name: Set up Java toolchain
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"

      - name: Build with Gradle
        run: ./gradlew build

      - name: Analyze with SonarCloud
        # You can pin the exact commit or the version.
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ env.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ env.SONAR_PROJECT_ORGANIZATION }}
          SONAR_JDBC_URL: ${{ env.SONAR_JDBC_URL }}
          SONAR_JDBC_USERNAME: ${{ env.SONAR_JDBC_USERNAME }}
          SONAR_JDBC_PASSWORD: ${{ env.SONAR_JDBC_PASSWORD }}
        with:
          # Additional arguments for the sonarcloud scanner
          args:
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory
            -Dsonar.projectKey=$SONAR_PROJECT_KEY
            -Dsonar.organization=$SONAR_ORGANIZATION
            -Dsonar.host.url=$SONAR_HOST_URL
            -Dsonar.java.binaries=.
            -Dsonar.sources=src/main/java
            -Dsonar.tests=src/test/java
